/*
 * Reto #9
 * C√ìDIGO MORSE
 * Fecha publicaci√≥n enunciado: 02/03/22
 * Fecha publicaci√≥n resoluci√≥n: 07/03/22
 * Dificultad: MEDIA
 *
 * Enunciado: Crea un programa que sea capaz de transformar texto natural a c√≥digo morse y viceversa.
 * - Debe detectar autom√°ticamente de qu√© tipo se trata y realizar la conversi√≥n.
 * - En morse se soporta raya "‚Äî", punto ".", un espacio " " entre letras o s√≠mbolos y dos espacios entre palabras "  ".
 * - El alfabeto morse soportado ser√° el mostrado en https://es.wikipedia.org/wiki/C√≥digo_morse.
 *
 * Informaci√≥n adicional:
 * - Usa el canal de nuestro discord (https://mouredev.com/discord) "üîÅreto-semanal" para preguntas, dudas o prestar ayuda a la acomunidad.
 * - Puedes hacer un Fork del repo y una Pull Request al repo original para que veamos tu soluci√≥n aportada.
 * - Revisar√© el ejercicio en directo desde Twitch el lunes siguiente al de su publicaci√≥n.
 * - Subir√© una posible soluci√≥n al ejercicio el lunes siguiente al de su publicaci√≥n.
 *
 */

function main() {
    const textoNatural = "chocapic, es una marca de cereales?"
    const textoMorse = decoder(textoNatural)
    console.log(textoMorse)
    console.log(decoder(textoMorse))
}

function decoder(input) {
    let decodedInput = ''

    //diccionario
    const diccNatural = {
        'A': '.‚Äî', 'N': '‚Äî.', '0': '‚Äî‚Äî‚Äî‚Äî‚Äî',
        'B': '‚Äî...', '√ë': '‚Äî‚Äî.‚Äî‚Äî', '1': '.‚Äî‚Äî‚Äî‚Äî',
        'C': '‚Äî.‚Äî.', 'O': '‚Äî‚Äî‚Äî', '2': '..‚Äî‚Äî‚Äî',
        'CH': '‚Äî‚Äî‚Äî‚Äî', 'P': '.‚Äî‚Äî.', '3': '...‚Äî‚Äî',
        'D': '‚Äî..', 'Q': '‚Äî‚Äî.‚Äî', '4': '....‚Äî',
        'E': '.', 'R': '.‚Äî.', '5': '.....',
        'F': '..‚Äî.', 'S': '...', '6': '‚Äî....',
        'G': '‚Äî‚Äî.', 'T': '‚Äî', '7': '‚Äî‚Äî...',
        'H': '....', 'U': '..‚Äî', '8': '‚Äî‚Äî‚Äî..',
        'I': '..', 'V': '...‚Äî', '9': '‚Äî‚Äî‚Äî‚Äî.',
        'J': '.‚Äî‚Äî‚Äî', 'W': '.‚Äî‚Äî', '.': '.‚Äî.‚Äî.‚Äî',
        'K': '‚Äî.‚Äî', 'X': '‚Äî..‚Äî', ',': '‚Äî‚Äî..‚Äî‚Äî',
        'L': '.‚Äî..', 'Y': '‚Äî.‚Äî‚Äî', '?': '..‚Äî‚Äî..',
        'M': '‚Äî‚Äî', 'Z': '‚Äî‚Äî..', '\"': '.‚Äî..‚Äî.', '/': '‚Äî..‚Äî.'
    };

    //diccionario para mapear morse a caracteres normales
    const diccMorse = Object.fromEntries(
        Object.entries(diccNatural).map(([key, value]) => [value, key])
    )

    //verifica si la entrada es texto natural o morse

    if (/[a-zA-Z0-9]/.test(input)) {
        //txt natural
        let index = 0;
        let ch = false;

         // Iterar sobre cada car√°cter del texto de entrada
        [...input.toUpperCase()].forEach(caracter => {
            // Verificar si el car√°cter es una letra
            if (!ch && caracter !== ' ') {
                const nextIndex = index + 1

                // Verificar si el car√°cter es 'C' y el siguiente car√°cter es 'H' para representar 'CH' en Morse
                if (caracter === 'C' && nextIndex < input.length && input.toUpperCase()[nextIndex] === 'H') {
                    decodedInput += diccNatural['CH']
                    ch = true
                } else {

                    // Agregar el car√°cter en Morse al resultado decodificado
                    decodedInput += diccNatural[caracter] || ''
                }

                decodedInput += ' '
            } else {
                // Agregar un espacio entre palabras
                if (!ch) {
                    decodedInput += ' '
                }
                ch = false
            }
            index++
        })
    } else if (input.includes('.') || input.includes('-')){
        // C√≥digo Morse

        // Separar las palabras de entrada por dos espacios en blanco
        input.split('  ').forEach(palabra => {
            // Separar los s√≠mbolos de Morse de cada palabra por un espacio
            palabra.split(' ').forEach(simbolo => {
                if (simbolo.length > 0) {
                    decodedInput += diccMorse[simbolo] || '' // Agregar el car√°cter natural correspondiente al s√≠mbolo de Morse al resultado decodificado
                }
            })
            // Agregar un espacio entre palabras
            decodedInput += ' '
        })
    }
     // Devolver el resultado decodificado, eliminando los espacios en blanco adicionales al inicio y al final
    return decodedInput.trim()
}

main()